// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// set_conda_version
void set_conda_version(std::string conda_version);
RcppExport SEXP _rhumba_set_conda_version(SEXP conda_versionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type conda_version(conda_versionSEXP);
    set_conda_version(conda_version);
    return R_NilValue;
END_RCPP
}
// set_verbosity
void set_verbosity(int lvl);
RcppExport SEXP _rhumba_set_verbosity(SEXP lvlSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type lvl(lvlSEXP);
    set_verbosity(lvl);
    return R_NilValue;
END_RCPP
}
// set_root_prefix
void set_root_prefix(std::string root_prefix);
RcppExport SEXP _rhumba_set_root_prefix(SEXP root_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type root_prefix(root_prefixSEXP);
    set_root_prefix(root_prefix);
    return R_NilValue;
END_RCPP
}
// set_channels
void set_channels(std::vector<std::string> channels);
RcppExport SEXP _rhumba_set_channels(SEXP channelsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type channels(channelsSEXP);
    set_channels(channels);
    return R_NilValue;
END_RCPP
}
// set_opt
void set_opt(int option, bool value);
RcppExport SEXP _rhumba_set_opt(SEXP optionSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type option(optionSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    set_opt(option, value);
    return R_NilValue;
END_RCPP
}
// print_context
void print_context();
RcppExport SEXP _rhumba_print_context() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    print_context();
    return R_NilValue;
END_RCPP
}
// list
void list();
RcppExport SEXP _rhumba_list() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    list();
    return R_NilValue;
END_RCPP
}
// install
void install(const std::vector<std::string>& specs, bool create_env);
RcppExport SEXP _rhumba_install(SEXP specsSEXP, SEXP create_envSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type specs(specsSEXP);
    Rcpp::traits::input_parameter< bool >::type create_env(create_envSEXP);
    install(specs, create_env);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rhumba_set_conda_version", (DL_FUNC) &_rhumba_set_conda_version, 1},
    {"_rhumba_set_verbosity", (DL_FUNC) &_rhumba_set_verbosity, 1},
    {"_rhumba_set_root_prefix", (DL_FUNC) &_rhumba_set_root_prefix, 1},
    {"_rhumba_set_channels", (DL_FUNC) &_rhumba_set_channels, 1},
    {"_rhumba_set_opt", (DL_FUNC) &_rhumba_set_opt, 2},
    {"_rhumba_print_context", (DL_FUNC) &_rhumba_print_context, 0},
    {"_rhumba_list", (DL_FUNC) &_rhumba_list, 0},
    {"_rhumba_install", (DL_FUNC) &_rhumba_install, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rhumba(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
